module Genisys;

# Copyright 2022 Battelle Energy Alliance, LLC

import spicy;

const ESCAPE_BYTE:     uint8 = 0xf0;
const HEADER_MIN:      uint8 = 0xf1;
const HEADER_MAX:      uint8 = 0xfe;
const TERMINATOR_BYTE: bytes = b"\xF6";

const CRC16_TABLE: vector<uint16> = [
  0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241,
  0xC601, 0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440,
  0xCC01, 0x0CC0, 0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40,
  0x0A00, 0xCAC1, 0xCB81, 0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841,
  0xD801, 0x18C0, 0x1980, 0xD941, 0x1B00, 0xDBC1, 0xDA81, 0x1A40,
  0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01, 0x1DC0, 0x1C80, 0xDC41,
  0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0, 0x1680, 0xD641,
  0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081, 0x1040,
  0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240,
  0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441,
  0x3C00, 0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41,
  0xFA01, 0x3AC0, 0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840,
  0x2800, 0xE8C1, 0xE981, 0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41,
  0xEE01, 0x2EC0, 0x2F80, 0xEF41, 0x2D00, 0xEDC1, 0xEC81, 0x2C40,
  0xE401, 0x24C0, 0x2580, 0xE541, 0x2700, 0xE7C1, 0xE681, 0x2640,
  0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0, 0x2080, 0xE041,
  0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281, 0x6240,
  0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441,
  0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41,
  0xAA01, 0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840,
  0x7800, 0xB8C1, 0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41,
  0xBE01, 0x7EC0, 0x7F80, 0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40,
  0xB401, 0x74C0, 0x7580, 0xB541, 0x7700, 0xB7C1, 0xB681, 0x7640,
  0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101, 0x71C0, 0x7080, 0xB041,
  0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0, 0x5280, 0x9241,
  0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481, 0x5440,
  0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40,
  0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841,
  0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
  0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
  0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
  0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
];

public type HeaderCode = enum {
  ACKNOWLEDGE_CLIENT              = 0xf1,
  INDICATION_DATA                 = 0xf2,
  CONTROL_DATA_CHECKBACK          = 0xf3,
  UNDEFINED_0xF4                  = 0xf4,
  UNDEFINED_0xF5                  = 0xf5,
  UNDEFINED_0xF6                  = 0xf6,
  UNDEFINED_0xF7                  = 0xf7,
  UNDEFINED_0xF8                  = 0xf8,
  COMMON_CONTROL_DATA             = 0xf9,
  ACKNOWLEDGE_INDICATION_AND_POLL = 0xfa,
  POLL                            = 0xfb,
  CONTROL_DATA                    = 0xfc,
  RECALL_HEADER                   = 0xfd,
  EXECUTE_CONTROLS                = 0xfe,
};

public type Direction = enum {
  CLIENT_TO_SERVER = 0,
  SERVER_TO_CLIENT = 1,
};

public type Messages = unit {
  : Message[];
};

public type Message = unit {
  # header code indicating the message type
  var header: HeaderCode = HeaderCode::Undef;
  # server address
  var server: uint8 = 0;
  # whether the message is client-to-server or server-to-client
  var direction: Direction = Direction::Undef;
  # CRC from message
  var crc: uint16 = 0;
  # actual CRC calculated as we parse
  var crcActual: uint16 = 0;
  # payload of address/data pairs in body
  var payload: vector<tuple<address: uint8, data: uint8>>;
  # used for internal parser state
  var rawBody: bytes = b"";
  var success: bool = False;

  # header byte
  : uint8 &requires=($$ >= HEADER_MIN && $$ <= HEADER_MAX) {
    self.header = cast<HeaderCode>($$);
    if (($$ >= cast<uint8>(HeaderCode::ACKNOWLEDGE_CLIENT)) && ($$ <= cast<uint8>(HeaderCode::CONTROL_DATA_CHECKBACK))) {
      self.direction = Direction::SERVER_TO_CLIENT;
    } else if (($$ >= cast<uint8>(HeaderCode::COMMON_CONTROL_DATA)) && ($$ <= cast<uint8>(HeaderCode::EXECUTE_CONTROLS))) {
      self.direction = Direction::CLIENT_TO_SERVER;
    }
  }

  # Go over entire message and unescape bytes. Escaping rules:
  # Any octets between the header and TERMINATOR_BYTE that are above
  # ESCAPE_BYTE must be escaped. The escaped octet produces two
  # octets: ESCAPE_BYTE followed by the low nybble of the escaped byte.
  : bytes &until=TERMINATOR_BYTE {

    local payloadLen: uint64 = |$$|;
    local hasCrc = (!((self.header == HeaderCode::ACKNOWLEDGE_CLIENT) || ((self.header == HeaderCode::POLL) && (payloadLen < 2))));
    local crcLen: uint64 = 0;
    local crcReverseIdx: uint64 = 0;

    # if there's a transmitted CRC, back up over the (possibly escaped) little-endian CRC and extract it
    if (hasCrc) {
      crcLen = 2;
      crcReverseIdx = payloadLen-1;
      self.crc = *($$.at(crcReverseIdx));
      crcReverseIdx--;
      if (*($$.at(crcReverseIdx)) == ESCAPE_BYTE) {
        self.crc = self.crc | ESCAPE_BYTE;
        crcLen++;
        crcReverseIdx--;
      }
      self.crc = self.crc << 8;
      self.crc = self.crc | *($$.at(crcReverseIdx));
      crcReverseIdx--;
      if (*($$.at(crcReverseIdx)) == ESCAPE_BYTE) {
        self.crc = self.crc | ESCAPE_BYTE;
        crcLen++;
        crcReverseIdx--;
      }
      payloadLen -= crcLen;

      # initialize calculated CRC with header values
      self.crcActual = cast<uint16>((self.crcActual >> 8) ^ CRC16_TABLE[(self.crcActual ^ cast<uint8>(self.header)) & 0xff]);
    } # if (hasCrc)

    # payloadLen now contains the length of the (still-escaped) server address and payload, but NOT the CRC.
    # unescape the values in the message body, assigning them to the server address and "raw" payload
    # also, continue to calculate the "actual" CRC as we go.

    # 0-based index into the escaped payload
    local idx: uint64 = 0;

    # have we encountered the server address (first byte) yet?
    local serverSet: bool = False;

    # have we encountered the ESCAPE_BYTE character indicating the next character needs to be unescaped?
    local escaped: bool = False;
    # the unescaped value (ESCAPE_BYTE | value)
    local unescapedVal: uint8 = 0;

    for (i in $$) {
      if (escaped == True) {
        escaped = False;
        unescapedVal = ESCAPE_BYTE | i;
        if (serverSet == True) {
          self.rawBody += unescapedVal;
        } else {
          self.server = unescapedVal;
        }
        self.crcActual = cast<uint16>((self.crcActual >> 8) ^ CRC16_TABLE[(self.crcActual ^ unescapedVal) & 0xff]);
      } else if (i == ESCAPE_BYTE) {
        escaped = True;
      } else {
        if (serverSet == True) {
          self.rawBody += i;
        } else {
          self.server = i;
          serverSet = True;
        }
        self.crcActual = cast<uint16>((self.crcActual >> 8) ^ CRC16_TABLE[(self.crcActual ^ i) & 0xff]);
      }
      idx++;
      if (idx >= payloadLen) {
        break;
      }
    } # end for (i in $$)

  } # end bytes &until=TERMINATOR_BYTE

  switch ( self.header ) {
    HeaderCode::ACKNOWLEDGE_CLIENT,
    HeaderCode::INDICATION_DATA,
    HeaderCode::CONTROL_DATA_CHECKBACK,
    HeaderCode::COMMON_CONTROL_DATA,
    HeaderCode::ACKNOWLEDGE_INDICATION_AND_POLL,
    HeaderCode::POLL,
    HeaderCode::CONTROL_DATA,
    HeaderCode::RECALL_HEADER,
    HeaderCode::EXECUTE_CONTROLS                -> :  Payload(self);
    *                                           -> :  NotImplemented(self);
  } &parse-from=self.rawBody if (self.header);

  on %error {
    self.backtrack();
  }

  on %done {
    self.success = True;
  }
};

type NotImplemented = unit(inout message: Message) {
  # Do nothing
};

type Payload = unit(inout message: Message) {
  : PayloadPairs(|message.rawBody|) {
    message.payload = $$.payload;
  }
};

type PayloadPairs = unit (payloadLen: uint64) {
  var payload: vector<tuple<address: uint8, data: uint8>>;
  : bytes &size=payloadLen {
    local idx = 0;
    local address: uint8 = 0;
    for (i in $$) {
      if (idx % 2 == 0) {
        address = i;
      } else {
        local x = i;
        self.payload.push_back((address, x));
      }
      idx++;
    }
  }
};
